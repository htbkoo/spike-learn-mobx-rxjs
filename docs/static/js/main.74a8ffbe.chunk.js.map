{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","muiThemeFactory.ts"],"names":["useStyles","makeStyles","theme","createStyles","todoListApp","minWidth","height","padding","spacing","display","flexDirection","todoItemsContainer","margin","overflowY","flex","appContainer","palette","background","default","primary","main","appLink","todoItemContainer","flexOne","idGenerator","generateId","lastId","TodoListApp","classes","useState","ids","todoAppState","setTodoAppState","Paper","className","Typography","variant","noValidate","autoComplete","onSubmit","event","preventDefault","TodoItems","AddTodoItem","map","id","TodoItem","key","text","isDone","todoTextWIP","setTodoTextWIP","Checkbox","checked","onChange","produce","nextState","TextField","label","value","disabled","target","onBlur","IconButton","color","aria-label","component","onClick","filter","existingId","RemoveCircle","errorMessage","setErrorMessage","draftState","next","push","AddCircle","Snackbar","open","autoHideDuration","onClose","handleCloseErrorSnackbar","Alert","elevation","severity","App","Boolean","window","location","hostname","match","myMuiTheme","createMuiTheme","type","responsiveFontSizes","createMyMuiTheme","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74a8ffbe.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {createStyles, Theme} from \"@material-ui/core\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {AddCircle, RemoveCircle} from \"@material-ui/icons\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport produce from \"immer\"\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        todoListApp: {\r\n            \"textAlign\": \"center\",\r\n            minWidth: \"80%\",\r\n            height: \"80vh\",\r\n            padding: theme.spacing(2),\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n        },\r\n        todoItemsContainer: {\r\n            margin: theme.spacing(1),\r\n            overflowY: \"auto\",\r\n            flex: 1,\r\n        },\r\n        appContainer: {\r\n            \"backgroundColor\": theme.palette.background.default,\r\n            \"minHeight\": \"100vh\",\r\n            \"display\": \"flex\",\r\n            \"flexDirection\": \"column\",\r\n            \"alignItems\": \"center\",\r\n            \"justifyContent\": \"center\",\r\n            \"fontSize\": \"calc(10px + 2vmin)\",\r\n            \"color\": theme.palette.primary.main\r\n        },\r\n        appLink: {\r\n            \"color\": \"#61dafb\"\r\n        },\r\n        todoItemContainer: {\r\n            display: \"flex\",\r\n            padding: theme.spacing(2),\r\n        },\r\n        flexOne: {\r\n            flex: 1,\r\n        }\r\n    }),\r\n);\r\n\r\nconst App: React.FC = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.appContainer}>\r\n            <TodoListApp/>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype TodoItemId = number;\r\n\r\ninterface TodoItem {\r\n    id: TodoItemId,\r\n    text: string,\r\n    isDone: boolean,\r\n}\r\n\r\ntype TodoListAppState = { [id: number]: TodoItem, ids: TodoItemId[] };\r\n\r\nconst idGenerator = (function* generateId() {\r\n    let lastId = 0;\r\n    while (true) {\r\n        yield lastId++;\r\n    }\r\n})();\r\n\r\nfunction getNextId(): TodoItemId {\r\n    return idGenerator.next().value; // TODO: replace this by uuid\r\n}\r\n\r\nfunction TodoListApp() {\r\n    const classes = useStyles();\r\n    const [todoAppState, setTodoAppState] = useState<TodoListAppState>({ids: []});\r\n\r\n    return (\r\n        <Paper className={classes.todoListApp}>\r\n            <Typography variant=\"h3\">Simple To Do List</Typography>\r\n            <form className={classes.todoItemsContainer} noValidate autoComplete=\"off\"\r\n                  onSubmit={event => event.preventDefault()}>\r\n                <TodoItems/>\r\n                <AddTodoItem/>\r\n            </form>\r\n        </Paper>\r\n    )\r\n\r\n    function TodoItems() {\r\n        return (\r\n            <>\r\n                {\r\n                    todoAppState.ids.map(id => (\r\n                        <TodoItem {...todoAppState[id]} key={id}/>\r\n                    ))\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    function TodoItem({text, isDone, id}: TodoItem) {\r\n        const [todoTextWIP, setTodoTextWIP] = useState(text);\r\n\r\n        return (\r\n            <div className={classes.todoItemContainer}>\r\n                <Checkbox\r\n                    checked={isDone}\r\n                    onChange={() =>\r\n                        setTodoAppState(produce(todoAppState, nextState => {\r\n                            nextState[id].isDone = !nextState[id].isDone\r\n                        }))\r\n                    }\r\n                />\r\n                <TextField label={`id for debugging: ${id}`} variant=\"outlined\" className={classes.flexOne}\r\n                           value={todoTextWIP}\r\n                           disabled={isDone}\r\n                           onChange={event => setTodoTextWIP(event.target.value)}\r\n                           onBlur={() =>\r\n                               setTodoAppState(produce(todoAppState, nextState => {\r\n                                   nextState[id].text = todoTextWIP\r\n                               }))\r\n                           }\r\n                />\r\n\r\n                <IconButton color=\"primary\" aria-label=\"remove todo item\" component=\"span\"\r\n                            onClick={() =>\r\n                                setTodoAppState(produce(todoAppState, nextState => {\r\n                                    nextState.ids = nextState.ids.filter(existingId => existingId !== id);\r\n                                    delete nextState[id];\r\n                                }))\r\n                            }\r\n                >\r\n                    <RemoveCircle/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function AddTodoItem() {\r\n        const EMPTY_TEXT_WIP = \"\", NO_ERROR = \"\";\r\n        const [todoTextWIP, setTodoTextWIP] = useState(EMPTY_TEXT_WIP);\r\n        const [errorMessage, setErrorMessage] = useState(NO_ERROR);\r\n\r\n        return (\r\n            <div className={classes.todoItemContainer}>\r\n                <TextField label=\"Add todo item\" variant=\"outlined\" className={classes.flexOne} value={todoTextWIP}\r\n                           onChange={event => setTodoTextWIP(event.target.value)}/>\r\n                <IconButton color=\"primary\" aria-label=\"add todo item\" component=\"span\" onClick={handleAddTodoItem}>\r\n                    <AddCircle/>\r\n                </IconButton>\r\n                {errorMessage ? (\r\n                    <Snackbar open={!!errorMessage} autoHideDuration={6000} onClose={handleCloseErrorSnackbar}>\r\n                        <Alert elevation={6} variant=\"filled\" onClose={handleCloseErrorSnackbar} severity=\"error\">\r\n                            {errorMessage}\r\n                        </Alert>\r\n                    </Snackbar>\r\n                ) : \"\"}\r\n            </div>\r\n        )\r\n\r\n        function handleAddTodoItem() {\r\n            if (todoTextWIP) {\r\n                const nextState = produce(todoAppState, draftState => {\r\n                    const id = getNextId();\r\n                    draftState.ids.push(id);\r\n                    draftState[id] = {\r\n                        text: todoTextWIP,\r\n                        isDone: false,\r\n                        id\r\n                    };\r\n                });\r\n                setTodoAppState(nextState);\r\n                setTodoTextWIP(EMPTY_TEXT_WIP);\r\n            } else {\r\n                setErrorMessage(\"To do item cannot be empty!\")\r\n            }\r\n        }\r\n\r\n        function handleCloseErrorSnackbar() {\r\n            setErrorMessage(NO_ERROR);\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createMyMuiTheme} from \"./muiThemeFactory\";\r\n\r\nimport './index.css';\r\n\r\nconst myMuiTheme = createMyMuiTheme();\r\n\r\nReactDOM.render((\r\n    <ThemeProvider theme={myMuiTheme}>\r\n        <App/>\r\n    </ThemeProvider>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\r\nimport responsiveFontSizes from \"@material-ui/core/styles/responsiveFontSizes\";\r\n\r\nexport function createMyMuiTheme() {\r\n    const theme = createMuiTheme({\r\n        palette: {\r\n            type: 'dark',\r\n            primary: {main: \"#7986cb\"}\r\n        },\r\n    });\r\n\r\n    return responsiveFontSizes(theme);\r\n}"],"sourceRoot":""}